

inline style is one of the ways to insert a style sheet. With an inline style, a unique style is applied to a single element.

In order to use an inline style, add the style attribute to the relevant tag.

<p style="color:white; background-color:gray;"> <!-- inline style-->
    This is an example of inline styling. 
</p>

Internal/Embedded styles are defined within the <style> element, inside the head section of an HTML page.

<html>
   <head>
      <style> <!-- Embedded/Internal Style-->
      p {
         color:white;
         background-color:gray;
      }
      </style> <!-- Embedded/Internal Style-->
   </head>
   <body>
      <p>This is my first paragraph. </p>
      <p>This is my second paragraph. </p>
   </body>
</html>

An internal style sheet may be used if one single page has a unique style.

With the External Style method, all styling rules are contained in a single text file, which is saved with the .css extension.
This CSS file is then referenced in the HTML using the <link> tag. The <link> element goes inside the head section.

<head>
   <link rel="stylesheet" href="example.css"> <!-- Style-->
</head>
<body>
   <p>This is my first paragraph.</p> <!-- element affected by style-->
   <p>This is my second paragraph. </p> <!-- element affected by style-->
   <p>This is my third paragraph. </p> <!-- element affected by style-->
</body>

p {
    color:white;
    background-color:gray;
} <!-- the style being hyper referenced -->

Both relative and absolute paths can be used to define the href for the CSS file. 
In our example, the path is relative, as the CSS file is in the same directory as the HTML file.

CSS is composed of style rules that the browser interprets and then applies to the corresponding elements in your document.
A style rule has three parts: selector, property, and value.

<h1>A Sample Heading</h1>
h1<!--selector--> { color<!--property-->: orange<!--value-->; }

The most common and easy to understand selectors are type selectors. This selector targets element types on the page.

<p>This is a paragraph</p> <!-- element called by selector-->
p {
    color: red;
    font-size:130%;
}

A CSS declaration always ends with a semicolon, and declaration groups are surrounded by curly braces.

id selectors allow you to style an HTML element that has an id attribute, regardless of their position in the document tree. 

<div id="intro"> <!-- the id that the style will look for-->
    <p> This paragraph is in the intro section.</p>
</div>
<p> This paragraph is not in the intro section.</p>

#intro {
    color: white;
    background-color: gray;
}

To select an element with a specific id, use a hash character, and then follow it with the id of the element.

Class selectors work in a similar way. 
The major difference is that IDs can only be applied once per page, while classes can be used as many times on a page as needed.

<div>
    <p class="first">This is a paragraph</p>
    <p> This is the second paragraph. </p>
</div>
<p class="first"> This is not in the intro section</p>
<p> The second paragraph is not in the intro section. </p>

.first {font-size: 200%;}

To select elements with a specific class, use a period character, followed by the name of the class.
Do NOT start a class or id name with a number!

Descendant selectors are used to select elements that are descendants of another element. 
When selecting levels, you can select as many levels deep as you need to.

<div id="intro">
    <p class="first">This is a <em> paragraph.</em></p> <!-- the word paragraph will be selected and effected by the style--> 
    <p> This is the second paragraph. </p>
</div>
<p class="first"> This is not in the intro section.</p>
<p> The second paragraph is not in the intro section. </p>

#intro .first em {
    color: pink; 
    background-color:gray;
}

The descendant selector matches all elements that are descendants of a specified element.

Comments are used to explain your code, and may help you when you edit the source code later. Comments are ignored by browsers.
/* Comment goes here */

p { 
    color: green; 
    /* This is a comment */
    font-size: 150%;
}

The final appearance of a web page is a result of different styling rules. This is called the Cascade

The three main sources of style information that form a cascade are:

- The stylesheet created by the author of the page
- The browser's default styles
- Styles specified by the user

Inheritance refers to the way properties flow through the page. 
A child element will usually take on the characteristics of the parent element unless otherwise defined.

<html>
   <head>
      <style>
      body {
         color: green;
         font-family: Arial;
      }
     </style>
   </head>
   <body>       
      <p>
      This is a text inside the paragraph. <!-- this text will be Arial and Green becasue of the inheritance of the older body tag-->
      </p>
   </body>
</html>

Since the paragraph tag (child element) is inside the body tag (parent element), it takes on any styles assigned to the body tag.

The font-family property specifies the font for an element.
There are two types of font family names:
- font family: a specific font family (like Times New Roman or Arial)
- generic family: a group of font families with a similar look (like Serif or Monospace)

<p class="serif">
   This is a paragraph shown in serif font.
</p>
<p class="sansserif">
   This is a paragraph shown in sans-serif font.
</p> 
<p class="monospace">
   This is a paragraph shown in monospace font.
</p> 
<p class="cursive">
   This is a paragraph shown in cursive font.
</p> 
<p class="fantasy">
   This is a paragraph shown in fantasy font.
</p> 

p.serif {
    font-family: "Times New Roman", Times, serif;
}
p.sansserif {
    font-family: Helvetica, Arial, sans-serif;
}
p.monospace {
    font-family: "Courier New", Courier, monospace;
}
p.cursive {
    font-family: Florence, cursive;
}
p.fantasy {
    font-family: Blippo, fantasy;
}

Separate each value with a comma to indicate that they are alternatives.
If the name of a font family is more than one word, it must be in quotation marks: "Times New Roman".

The font-family property should hold several font names as a "fallback" system. 
When specifying a web font in a CSS style, add more than one font name, in order to avoid unexpected behaviors. 
If the client computer for some reason doesn't have the one you choose, it will try the next one.

It is a good practice to specify a generic font family, to let the browser pick a similar font in the generic family, if no other fonts are available.

body {
   font-family: Arial, "Helvetica Neue", Helvetica, sans-serif;
}

If the browser does not support the font Arial, 
it tries the next fonts (Helvetica Neue, then Helvetica). 
If the browser doesn't have any of them, it will try the generic sans-serif.

The font-size property sets the size of a font. One way to set the size of fonts on the web is to use keywords. 
For example xx-small, small, medium, large, larger, etc.

<p class="small">
   Paragraph text set to be small
</p>
<p class="medium">
   Paragraph text set to be medium
</p>
<p class="large">
   Paragraph text set to be large
</p>
<p class="xlarge">
   Paragraph text set to be very large
</p>

p.small {
    font-size: small;
}
p.medium {
    font-size: medium;
}
p.large {
    font-size: large;
}
p.xlarge {
    font-size: x-large;
}

Keywords are useful if you do not want the user to be able to increase the size of the font because it will adversely affect your site's appearance.

You can also use numerical values in pixels or ems to manipulate font size.
Setting the font size in pixel values (px) is a good choice when you need pixel accuracy, and it gives you full control over the text size.
The em size unit is another way to set the font size (em is a relative size unit). It allows all major browsers to resize the text. 
If you haven't set the font size anywhere on the page, then it is the browser default size, which is 16px.

To calculate the em size, just use the following formula: em = pixels / 16

<h1>This is a heading</h1>
h1 {
    font-size: 20px;
}

<h1>This is a heading</h1>
h1 {
    font-size: 1.25em; 
}

Both of the examples will produce the same result in the browser, because 20/16=1.25em.

Try different combinations of text size and page zooming in a variety of browsers to ensure that the text remains readable.

The font-style property is typically used to specify italic text

<p class="italic">This is a paragraph in italic style.</p>

p.italic {
    font-style: italic;
}

The font-style property has three values: normal, italic, and oblique.
Oblique is very similar to italic, but less supported.

<p class="normal">This paragraph is normal.</p>
<p class="italic">This paragraph is italic.</p>
<p class="oblique">This paragraph is oblique.</p>

p.normal {
    font-style: normal;
}
p.italic {
    font-style: italic;
}
p.oblique {
    font-style: oblique;
}

The HTML <i> tag will produce exactly the same result as the italic font style.

The font-weight controls the boldness or thickness of the text. The values can be set as normal (default size), bold, bolder, and lighter.

<p class="light">This is a font with a "lighter" weight.</p>
<p class="bold">This is a font with a "bold" weight.</p>
<p class="bolder">This is a font with a "bolder" weight.</p>

p.light {   
    font-weight: lighter;
}
p.bold {   
    font-weight: bold;
}
p.bolder {
    font-weight: bolder;
}

You can also define the font weight with a number from 100 (thin) to 900 (thick), according to how thick you want the text to be.
400 is the same as normal, and 700 is the same as bold.

<p class="light">This is a font with a "lighter" weight.</p>
<p class="thick">This is a font with a "bold" weight.</p>
<p class="thicker">This is a font with a "700" weight.</p>

p.light {
    font-weight: lighter;
}
p.thick {
    font-weight: bold;
}
p.thicker {
    font-weight: 700;
}

The HTML <strong> tag also makes the text bold.

The CSS font-variant property allows you to convert your font to all small caps. The values can be set as normal, small-caps, and inherit.

<p class="normal">Paragraph font variant set to normal.</p>
<p class="small">Paragraph font variant set to small-caps.</p>

p.normal {
    font-variant: normal;
}
p.small {
    font-variant: small-caps;
}

The CSS color property specifies the color of the text.
One method of specifying the color of the text is using a color name: like red, green, blue, etc.

<p class="example">The text inside the paragraph is green.</p>
The text outside the paragraph is black (by default). 

p.example {
    color: green;
}

Another way of defining colors is using hexadecimal values and RGB.
Hexadecimal form is a pound sign (#) followed by at most, 6 hex values (0-F).
RGB defines the individual values for Red, Green, and Blue.

<h1>This is a heading</h1>
<p class="example">This is a paragraph</p>

h1 {
    color: #0000FF;
}
p.example {
    color: rgb(255,0,0);
}

The text-align property specifies the horizontal alignment of text in an element. 
By default, text on your website is aligned to the left. However, at times you may require a different alignment.

text-align property values are as follows: left, right, center, and justify.

<p class="left">This paragraph is aligned to <strong>left.</strong></p>
<p class="right">This paragraph is aligned to <strong>right.</strong></p>
<p class="center">This paragraph is aligned to <strong>center.</strong></p>

p.left {
    text-align: left;
}
p.right {
    text-align: right;
}
p.center {
    text-align: center;
}

When text-align is set to "justify", each line is stretched so that every line has equal width, 
and the left and right margins are straight (as in magazines and newspapers).

The vertical-align property sets an element's vertical alignment. Commonly used values are top, middle, and bottom.

<table border="1" cellpadding="2" cellspacing="0" style="height: 150px;">
  <tr>
     <td class="top">Top</td>
     <td class="middle">Middle</td>
     <td class="bottom">Bottom</td>
  </tr>
</table>

td.top {
    vertical-align: top;
}
td.middle {
    vertical-align: middle;
}
td.bottom {
    vertical-align: bottom;
}

The vertical-align property also takes the following values: baseline, sub, super, % and px (or pt, cm).

<p>This is an <span class="baseline">inline text</span> example.</p>
<p>This is a <span class="sub">sub line text</span> example.</p>
<p> This is a <span class="super">super line text</span> example.</p>
<p> This is a <span class="pixel">pixel</span> example.</p>

span.baseline {
    vertical-align: baseline;
}
span.sub {
    vertical-align: sub;
}
span.super {
    vertical-align: super;
}
span.pixel {
    vertical-align: -10px;
}

Instead of px values, you can use pt (points), cm (centimeters) and % (percentage) values.

Vertical align property does not act the same way for all elements.
For example, some additional CSS styling is needed for div elements.

<div class="main">
   <div class="paragraph">
   This text is aligned to the middle
   </div>
</div>

.main {
    height: 150px; width: 400px;
    background-color: LightSkyBlue;
    display: inline-table;
}
.paragraph {
    display: table-cell;
    vertical-align: middle;
}

display: inline-table; and display: table-cell; styling rules are applied to make the vertical-align property work with divs.

The text-decoration property specifies how the text will be decorated.

Commonly used values are:
none - The default value, this defines a normal text
inherit - Inherits this property from its parent element
overline - Draws a horizontal line above the text
underline - Draws a horizontal line below the text
line-through - draws a horizontal line through the text (substitutes the HTML <s> tag)

<p class="none">This is default style of the text (none).</p>
<p class="inherit">This text inherits the decoration of the parent.</p>
<p class="overline">This is overlined text.</p>
<p class="underline">This is underlined text.</p>
<p class="line-through">This is lined-through text.</p>

p.none {
    text-decoration: none;
}
p.inherit {
    text-decoration: inherit;
}
p.overline {
    text-decoration: overline;
}
p.underline {
    text-decoration: underline;
}
p.line-through {
    text-decoration: line-through;
}

You can combine the underline, overline, or line-through values in a space-separated list to add multiple decoration lines.

Another value of text-decoration property is blink which makes the text blink.

text-decoration: blink; 

The text-indent property specifies how much horizontal space should be left before the beginning of the first line of the text. 
Property values are length (px, pt, cm, em, etc.), %, and inherit.

<p>This is an example of 
<strong>text-indent </strong> property. 
First line of our text is indented to the right in 60px. 
Besides pixels you can also use other measurement units, 
like pt, cm, em, etc. </p>

p {
    text-indent: 60px;
}

Negative values are allowed. The first line will be indented to the left if the value is negative.

The text-shadow property adds shadow to text.
It takes four values: the first value defines the distance of the shadow in the x (horizontal) direction, 
the second value sets the distance in the y (vertical) direction, the third value defines the blur of the shadow, and the fourth value sets the color.

<h1>Text-shadow example</h1>

h1 {
    color: blue;
    font-size: 30pt;
    text-shadow: 5px 2px 4px grey;
}

In the example above, we created a shadow using the following parameters:
5px – the X-coordinate
2px – the Y-coordinate
4px – the blur radius
grey – the color of the shadow

To add more than one shadow to the text, add a comma-separated list of shadows.

When working with shadows, you can use any CSS-supported color format.

For the x and y offsets, various types of units can be used (like px, cm, mm, in, pc, pt, etc).
Negative values are also supported.

The example below creates a blue drop-shadow, two pixels higher than the main text, one pixel to the left of it, and with a 0.5em blur

<h1>Text-shadow with blur effect</h1>

h1 {
    font-size: 20pt;   
    text-shadow: rgba(0,0,255,1) -1px -2px 0.5em; 
}

The text-transform CSS property specifies how to capitalize an element's text. 
For example, it can be used to make text appear with each word capitalized.

<p class="capitalize">
    The value capitalize transforms the first 
    character in each word to uppercase; 
    all other characters remain unaffected.
</p>
p.capitalize {
    text-transform: capitalize;
}

Using text-transform property you can make text appear in all-uppercase or all-lowercase.

<p class="uppercase">This value transforms all characters to uppercase.</p>
<p class="lowercase">This value transforms all characters to lowercase.</p>
p.uppercase {
    text-transform: uppercase;
}
p.lowercase {
    text-transform: lowercase;
}

The value none will produce no capitalization effect at all.

The letter-spacing property specifies the space between characters in a text. The values can be set as:
- normal defines the default style with no extra space between characters
- length defines an extra space between characters using measurement units like px, pt, cm, mm, etc.;
- inherit inherits the property from its parent element;

<p class="normal">This paragraph has no additional letter-spacing applied.</p>
<p class="positive ">This paragraph is letter-spaced at 4px.</p>
p.normal { 
    letter-spacing: normal;
}
p.positive { 
    letter-spacing: 4px;
}


For defining an extra space between characters, negative values are also permitted.

<p class="positive">This paragraph is letter-spaced at 4px.</p>
<p class="negative">This paragraph is letter-spaced at -1.5px</p>
p.positive { 
    letter-spacing: 4px; 
}
p.negative { 
    letter-spacing: -1.5px; 
}

The word-spacing property specifies the space between words in a text. 
Just like the letter-spacing property, you can set the word-spacing values as normal, length, and inherit.

<p class="normal">This paragraph has no additional word-spacing applied.</p>
<p class="px">This paragraph is word-spaced at 30px.</p>

p.normal { 
    word-spacing: normal;
}
p.px { 
    word-spacing: 30px;
}

When a weird spacing is used, and it is necessary to keep the selected paragraph with normal word spacing, the normal option is usually used.

To define an extra space between words, you can use positive measurement values like px, pt, pc, cm, mm, inches, em, and ex.
Negative values are also permitted. 

<p class="positive">This paragraph is word-spaced at 20px.</p>
<p class="negative">This paragraph is word-spaced at -5px.</p>

p.positive { 
    word-spacing: 20px;
}
p.negative { 
    word-spacing: -5px;
}

The white-space property specifies how white-space inside an element is handled. The values can be set as normal, inherit, nowrap, etc.

The nowrap value makes the text continue on the same line until a <br> tag is encountered, and also collapses all sequences of whitespace into a single whitespace.

<p>
This paragraph has         multiple spaces      and <!-- the style forces the computer to ignore these huge spaces and adopta normal spacing-->
a line break, but it will be ignored, as we used the nowrap value. 
</p>

p {
    white-space: nowrap;
}

The text will continue on the same line until a <br /> tag is encountered.

The white-space property also supports other values:
pre - text will only wrap on line breaks and white space
pre-line - text will wrap where there is a break in code, but extra white space is still ignored
pre-wrap - text will wrap when necessary, and on line breaks

<p class="pre"> 
In the markup we have multiple            spaces 
and a line break. 
</p>
<p class="preline"> 
In the markup we have multiple            spaces 
and a line break, but in the result multiple spaces are ignored. 
</p>
<p class="prewrap"> 
In the markup we have              multiple 
spaces and a line break.
</p>

p.pre {
    white-space: pre;
}
p.preline {
    white-space: pre-line;
}
p.prewrap {
    white-space: pre-wrap;
}

Pre-wrap value behaves as the pre value, except that it adds extra line breaks to prevent the text breaking out of the element's box.

All HTML elements can be considered as boxes. 
The CSS box model represents the design and layout of the site. 
It consists of margins, borders, paddings, and the actual content.

margins
borders
paddings
content
paddings
borders
margins


The properties work in the same order: top, right, bottom, and left.

The term "box model" is used when talking about design and layout.

Every element of the webpage is a box. CSS uses the box model to determine how big the boxes are and how to place them.
The box model is also used to calculate the actual width and height of the HTML elements

When working with boxes, it is important to understand how the total width of an element is calculated.
For example, the total width of the box with paddings will be the sum of width plus padding left and padding right

left padding = 10px
right padding = 10px
content = 200px

Here is another box with margins, border, and paddings.
The total width is the sum of left and right margins, left and right borders, left and right paddings, and the actual width of the content.

margin-left = 15px
margin-right = 15px
border left = 2px
border right = 2px
left padding = 10px
right padding = 10px
content = 200px

When you set the width and height properties of an element with CSS, you set the width and height of the content area.
When setting a background-color to a box, it covers the content area, as well as the padding.


The total height of an element is calculated the same way as the width.
The example below is the same box from the previous lesson with padding, border and margin.

margin-left = 15px
margin-right = 15px
border left = 2px
border right = 2px
left padding = 10px
right padding = 10px
content = 200px

To summarize, Total element height = height + top padding + bottom padding + top border + bottom border + top margin + bottom margin

The CSS border property allows you to customize the borders of HTML elements.
In order to add a border to the element, you need to specify the size, style, and color of the border.

<p>This is an example of a solid border.</p>
p {
    padding: 10px;    
    border: 5px solid green;
}

The properties for the border can be set separately. The border-width property specifies the width of the border.

<p class="first">
    Border width of this paragraph is set to 2px.
</p>
<p class="second">
    Border width of this paragraph is set to 5px.
</p>

p.first {
    padding: 10px;    
    border-style: solid;
    border-width: 2px;
}
p.second {
    padding: 10px;    
    border-style: solid;
    border-width: 5px;
}

The border color of the element can be defined using a color name, RGB, or Hex values.

<p class="first">
   Border color has been created using <strong>color name.</strong>
</p>
<p class="second">
   Border color has been created using <strong>Hex values.</strong> 
</p>
<p class="third">
   Border color has been created using <strong>RGB values.</strong> 
</p>
p.first {
    padding: 10px;
    border-style: solid;
    border-width: 2px;
    border-color: blue;
}
p.second {
    padding: 10px;    
    border-style: solid;
    border-width: 2px;
    border-color: #FF6600;
} 
p.third {
    padding: 10px;
    border-style: solid;
    border-width: 2px;
    border-color: rgb(0, 153, 0);
}

None of the border properties will have any effect unless the border-style property is set.

The default value of border-style is none, which defines no border.
There are various styles supported for the border-style property: dotted, dashed, double, etc. 

<p class="none">This paragraph has no border.</p>
<p class="dotted">This is a dotted border.</p>
<p class="dashed">This is a dashed border.</p>
<p class="double">This is a double border.</p>
<p class="groove">This is a grooved border.</p>
<p class="ridge">This is a ridged border.</p>
<p class="inset">This is an inset border.</p>
<p class="outset">This is an outset border.</p>
<p class="hidden">This is a hidden border.</p>
p.none {border-style: none;}
p.dotted {border-style: dotted;}
p.dashed {border-style: dashed;}
p.double {border-style: double;}
p.groove {border-style: groove;}
p.ridge {border-style: ridge;}
p.inset {border-style: inset;}
p.outset {border-style: outset;}
p.hidden {border-style: hidden;}

In CSS, it is possible to specify different borders for different sides, using the following properties: 
border-top-style, border-right-style, border-bottom-style, and border-left-style for the corresponding sides.

To style a <div> element to have a total width and height of 100px

<div>The total width and height of this element is 100px.</div>
div {
    border: 5px solid green;    
    width: 90px;
    height: 90px;
}

The total width and height of the box will be the 90px+5px (border)+5px(border) = 100px;

The width and height of an element can be also assigned using percents.

<div>The total width of this element is <strong>100%
</strong> and the total height is 
<strong>100px</strong> .</div>
div {
    border: 5px solid green;    
    width: 100%;
    height: 90px;
}

To set the minimum and maximum height and width of an element, you can use the following properties:

min-width - the minimum width of an element
min-height - the minimum height of an element
max-width - the maximum width of an element
max-height - the maximum height of an element

<p class="first">The <strong>minimum height </strong> of this paragraph is set to 100px.</p>
<p class="second">The<strong> maximum width </strong> of this paragraph is set to 100px.</p>
p.first {
    border: 5px solid green;    
    min-height: 100px;
}
p.second {
    border: 5px solid green;    
    max-width: 100px;
}

The background-color property is used to specify the background color of an element.

<p>The background color of this page is set to LightSkyBlue.</p>
body {
    background-color: #87CEFA;
}

The color of the background can be defined using three different formats: a color name, hexadecimal values, and RGB.

<h1>This is a heading</h1>
<p>This is a paragraph</p>
body {
    background-color: #C0C0C0;
}
h1 {
    background-color: rgb(135,206,235);
}
p {
    background-color: LightGreen;
}


The background-image property sets one or several background images in an element.

<html>
	<head>
		<title>Page Title</title>
	</head>
	<body>
		
	</body>
</html>

body {
    background-image: url("http://www.sololearn.com/uploads/css_logo.png");
    background-color: #e9e9e9;
}

The url specifies the path to the image file. Both relative and absolute paths are supported. 
By default, a background-image is placed at the top-left corner of an element, and is repeated both vertically and horizontally to cover the entire element.

Background-image can be set not only for the whole page, but for individual elements, as well.

<p>This paragraph has a background image.</p>
p {
    padding: 30px;
    background-image: url("http://www.sololearn.com/images/tree.jpg");
    color: white;   
}

To specify more than one image, just separate the URLs with commas.

The background repeat property specifies how background images are repeated.
A background image can be repeated along the horizontal axis, the vertical axis both axes, or not repeated at all.

The repeat-x will repeat a background image only horizontally.

<html>
	<head>
		<title>Page Title</title>
	</head>
	<body>
		
	</body>
</html>
body {
    background-image: url("http://www.sololearn.com/uploads/css_logo.png");
    background-repeat: repeat-x;
}

The repeat-y will repeat a background-image only vertically.

body {
    background-image: url("http://www.sololearn.com/uploads/css_logo.png");
    background-repeat: repeat-y;
}

If you want the image to be shown only once, use the no-repeat value.

When you set the background-repeat property to inherit, it will take the same specified value as the property for the element's parent.

For example, we set the body background repeat only horizontally. 
If we set some paragraph background-repeat values to be inherited, they will take the same property value as the body element.

<html>
	<head>
		<title>Page Title</title>
	</head>
	<body>
		<p>This is some paragraph.</p>
	</body>
</html>
body {
    background-image: url("http://www.sololearn.com/uploads/css_logo.png");
    background-repeat: repeat-x;
}
p {
    background-image: url("http://www.sololearn.com/uploads/css_logo.png");
    background-repeat: inherit;
    margin-top: 200px;
    padding: 50px;
}

The background-attachment property sets whether a background image is fixed or scrolls with the rest of the page.
Even if an element has a scrolling mechanism, a "fixed" background doesn't move with the element.

<!DOCTYPE html>
<html>
	<head>
		<title>Page Title</title>
	</head>
	<body>
		<p>This background-image is fixed. Even if you try to scroll down the page, it will not move.</p>
		<p>This background-image is fixed. Even if you try to scroll down the page, it will not move.</p>
		<p>This background-image is fixed. Even if you try to scroll down the page, it will not move.</p>
		<p>This background-image is fixed. Even if you try to scroll down the page, it will not move.</p>
		<p>This background-image is fixed. Even if you try to scroll down the page, it will not move.</p>
		<p>This background-image is fixed. Even if you try to scroll down the page, it will not move.</p>
		<p>This background-image is fixed. Even if you try to scroll down the page, it will not move.</p>
		<p>This background-image is fixed. Even if you try to scroll down the page, it will not move.</p>
	</body>
</html>
body {
    background-image: url("http://www.sololearn.com/uploads/css_logo.png");
    background-repeat: no-repeat;
    background-attachment: fixed;
}

You can also set the background-attachment to inherit or scroll.
When you set the background-attachment to inherit, it will inherit the value from its parent element.

When you set the background-attachment to scroll, the background image will scroll with the rest of the content.

<!DOCTYPE html>
<html>
	<head>
		<title>Page Title</title>
	</head>
	<body>
		<p>This background-image value is scroll. When you scroll down the page, image will scroll along the element.</p>
		<p>This background-image value is scroll. When you scroll down the page, image will scroll along the element.</p>
		<p>This background-image value is scroll. When you scroll down the page, image will scroll along the element.</p>
		<p>This background-image value is scroll. When you scroll down the page, image will scroll along the element.</p>
		<p>This background-image value is scroll. When you scroll down the page, image will scroll along the element.</p>
		<p>This background-image value is scroll. When you scroll down the page, image will scroll along the element.</p>
		<p>This background-image value is scroll. When you scroll down the page, image will scroll along the element.</p>
		<p>This background-image value is scroll. When you scroll down the page, image will scroll along the element.</p>
	</body>
</html>
body {
    background-image: url("http://www.sololearn.com/uploads/css_logo.png");
    background-repeat: no-repeat;
    background-attachment: scroll;
}

The CSS list properties allow us to set different list item markers. In HTML, there are two types of lists:
unordered lists (<ul>) - the list items are marked with bullets
ordered lists (<ol>) - the list items are marked with numbers or letters
With CSS, lists can be styled further, and images can be used as the list item marker.
One of the ways is to use the list-style-type property, which can be set to circle, square, decimal, disc, lower-alpha, etc.

<ol class="lower-alpha">
   <li>Red</li>
   <li>Green</li>
   <li>Blue</li>
</ol>
<ul class="circle">
   <li>Red</li>
   <li>Green</li>
   <li>Blue</li>
</ul>
<ul class="square">
   <li>Red</li>
   <li>Green</li>
   <li>Blue</li>
</ul>

ol.lower-alpha {
    list-style-type: lower-alpha;
}
ul.circle {
    list-style-type: circle;
}
ul.square {
    list-style-type: square;
}

There are also other list properties, such as:
list-style-image - specifies an image to be used as the list item marker.
list-style-position - specifies the position of the marker box (inside, outside).

<p>The following list has list-style-position: <strong>inside</strong>.</p>
<ul>
   <li>Red</li>
   <li>Green</li>
   <li>Blue</li>
</ul>

ul {
    list-style-image: url("http://www.sololearn.com/images/bullet.jpg");
    list-style-position: inside;
}

The list-style property is a shorthand property for setting list-style-type, list-style-image and list-style-position. 
It is used to set all of the list properties in one declaration

ul {
   list-style: square outside none;
}
ul {
    list-style-type: square;
    list-style-position: outside;
    list-style-image: none;
}
If one of the property values are missing, the default value for the missing property will be inserted, if any.

The look of an HTML table can be greatly improved with CSS.
The border-collapse property specifies whether the table borders are collapsed into a single border or separated as default. 
If the borders are separate, the border-spacing property can be used to change the spacing.

<table border="1">
   <tr>
     <td>Red</td>
     <td>Green</td>
   </tr>
   <tr>
      <td>Blue</td>
      <td>Yellow</td>
   </tr>
</table>

table {
    border-collapse: separate;
    border-spacing: 20px 40px;
}

The caption-side property specifies the position of a table caption. The values can be set as top or bottom.

<table border="1">
<caption>Some of Our Courses</caption>
<tr>
  <th>Course name</th>
  <th>Lessons</th>
  <th>Quizzes</th>
</tr>
<tr>
  <td>C++</td>
  <td>81</td>
  <td>363</td>
</tr>
<tr>
  <td>JavaScript</td>
  <td>48</td>
  <td>144</td>
</tr>
<tr>
  <td>HTML</td>
  <td>38</td>
  <td>119</td>
</tr>
<tr>
  <td>CSS</td>
  <td>70</td>
  <td>174</td>
</tr>
</table>
caption {
    caption-side: top;
}

The empty-cells property specifies whether or not to display borders and background on empty cells in a table.
Possible values are:
show: the borders of an empty cell are rendered
hide: the borders of an empty cell are not drawn

<table border="1">
  <tr>
    <td>HTML</td>
    <td>CSS</td>
  </tr>
  <tr>
    <td>JavaScript</td>
    <td></td>
  </tr>
</table>

table {
    border-collapse: separate;
    empty-cells: hide;
}

The table-layout specifies how the width of table columns is calculated. The possible values are:
auto - when column or cell width are not explicitly set, the column width will be in proportion to the amount of content in the cells that make up the column
fixed - when column or cell width are not explicitly set, the column width will not be affected by the amount of content in the cells that make up the column.
The table layout is set to auto by default.

<p>Table-layout is set to <strong>auto</strong></p>
<table class="auto">
  <tr>
    <td width=“10%">500.000.000.000.000</td>
    <td width="90%">20.000</td>
  </tr>
</table>

<p>Table-layout is set to <strong>fixed</strong></p>
<table class="fixed">
  <tr>
    <td width="10%">500.000.000.000.000</td>
    <td width="90%">20.000</td>
  </tr>
</table>

table {
    border-collapse: separate;
    width: 100%;
    border: 1px solid gray;
} 
td {
    border: 1px solid gray;
}
table.auto {
    table-layout: auto;
}
table.fixed {
    table-layout: fixed;
}

Links can be styled with any CSS property (e.g., color, font-family, background, etc.).
In addition, links can be styled differently, depending on what state they are in. The following pseudo selectors are available:
a:link - defines the style for normal unvisited links
a:visited - defines the style for visited links
a:active - a link becomes active once you click on it
a:hover - a link is hovered when the mouse is over it

<p><a href="http://www.sololearn.com" target="_blank">
   This link is hovered when we mouse over it <!--normally thsi is blue on the page. when we mouse over it, it becomes red, as we defined in our stylesheet.-->
</a></p>
a:hover {
    color: red;
}

When setting the style for several link states, there are some order rules:
- a:hover MUST come after a:link and a:visited
- a:active MUST come after a:hover

By default, text links are underlined by the browser.
One of the most common uses of CSS with links is to remove the underline.

<p><a href="http://www.sololearn.com" target="_blank">
   This link has no underline.
</a></p>
a:link {
    text-decoration: none;
}

The following properties are used to control the look and feel of links:
border:none - removes border from images with links
outline:none - removes the dotted border on clicked lines in IE

CSS allows you to set your desired cursor style when you mouse over an element. 
For example, you can change your cursor into a hand icon, help icon, and much more, rather than using the default pointer.

<span style="cursor:help;">
   Do you need help?
</span>

There are numerous other possible values for the cursor property, such as:
default - default cursor
crosshair - cursor displays as crosshair
pointer - cursor displays hand icon
The list of possible values is quite long.

CSS allows you to set your desired cursor style when you mouse over an element.

Usually, the appearance of the mouse cursor is altered to provide a more interesting experience for website visitors. 
However, choosing the wrong cursor style can be misleading, as well.

Every element on a web page is a rectangular box. The display property determines how that rectangular box behaves. 
A block element is an element that takes up the fullest width available, with line breaks before and after.

<span>First paragraph.</span>
<span>Second paragraph.</span>
<span>Third paragraph.</span>
<span>Fourth paragraph.</span>
<span>Fifth paragraph.</span>

span {
    display: block;
}

An inline element only takes up as much width as necessary, and does not force line breaks.

<p>First paragraph.</p>
<p>Second paragraph.</p>
<p>Third paragraph.</p>
<p>Fourth paragraph.</p>
<p>Fifth paragraph.</p>
p {
    display: inline;
}

Setting the display property of an element only changes how the element is displayed, not what kind of element it is. 
So, an inline element with display:block is not allowed to have other block elements inside it.

display:none hides an element, so it does not take up any space. 
The element will be hidden, and the page will be displayed as if the element is not there.

<h1>This text will not display, as we set the value to none.</h1>
<p>Headline of this paragraph is not displayed, as we set the value to none.</p>
h1 {
    display: none;
}

There are plenty of other display values, such as list-item, table, table-cell, table-column, grid, etc. Just play with values to see the difference.

The visibility property specifies whether an element is visible or hidden. The most common values are visible and hidden.

Hiding an element can be done by setting the display property to "none" or the visibility property to "hidden". 
However, notice that these two methods produce different results:
visibility:hidden hides an element, but it will still take up the same space as before.
The element will be hidden, but it will still affect the layout

<h1>This is a heading</h1>
<div class="hidden">
   This text will not display in browser.
</div>
<p>
   The space above this paragraph is empty because 
   the visibility of the div element is set to hidden.
</p>
div.hidden {
    visibility: hidden;
}

display:none hides an element, without holding a place for that element.

<h1>This is a heading</h1>
<div class="hidden">
    This text will not display in browser.
</div>
<p>
    As you can see the page displayed as if the div element is not there.
</p>
div.hidden {
    display: none;
}

The CSS positioning properties allow you to position an element. 
It can also place an element behind another, and specify what should happen when an element's content is too big.

Elements can be positioned using the top, bottom, left, and right properties. 
However, these properties will not work unless the position property is set first. They also work differently depending on the positioning method.

HTML elements are positioned static by default. A static positioned element is always positioned according to the normal flow of the page.

<p>Paragraph with no position.</p>
<p>Paragraph with no position.</p>
<p>Paragraph with no position.</p>
<p>Paragraph with no position.</p>
<p>Paragraph with no position.</p>
<p class="position_static">This paragraph has a static position.</p>

p.position_static {
    position:static;
    top: 30px;
    right: 5px;
    color: red;
}

Static positioned elements are not affected by the top, bottom, left, and right properties.

An element with a fixed position is positioned relative to the browser window, and will not move even if the window is scrolled.
The position can be specified using one or more of the properties top, right, bottom, and left.

<p>Paragraph with no position.</p>
<p>Paragraph with no position.</p>
<p>Paragraph with no position.</p>
<p>Paragraph with no position.</p>
<p>Paragraph with no position.</p>
<p class="position_fixed">Fixed position.</p>

p.position_fixed {
    position: fixed;
    top: 30px;
    right: 5px;
    color: red;
}

Fixed positioned elements are removed from the normal flow. The document and other elements behave like the fixed positioned element does not exist.
Fixed positioned elements can overlap other elements.

A relative positioned element is positioned relative to its normal position.
The properties top, right, bottom, and left can be used to specify how the rendered box will be shifted.

<p>This is some paragraph with <span>span </span> inside it. This is some paragraph with <span>span </span> inside it. This is some paragraph with <span>span </span> inside it</p>
p {
    width: 350px;
    border: 1px black solid;
    position: fixed;
}
span {
    background: green;
    color: white;
    position: relative;
    top: 150px;
    left: 50px;
}

The content of relatively positioned elements can be moved and overlap other elements, but the reserved space for the element is still preserved in the normal flow.

This value cannot be used for table cells, columns, column groups, rows, row groups, or captions.

An absolute position element is positioned relative to the first parent element that has a position other than static. 
If no such element is found, the containing block is <html>.
Absolutely positioned elements are removed from the normal flow. 
The document and other elements behave like the absolutely positioned element does not exist. Absolutely positioned elements can overlap other element

With CSS float, an element can be pushed to the left or right, allowing other elements to wrap around it.
Float is often used with images, but it is also useful when working with layouts.
The values for the float property are left, right, and none.
Left and right float elements in those directions, respectively. none (the default) ensures that the element will not float.

<p><img src="css_logo.png" />
This paragraph has an image that is floated to the <strong>right.</strong> 
It is highly recommended to add a margin to images so that the text does 
not get too close to the image. If you want your text to be easily read, you 
should always add a few pixels between words and borders, images, 
and other content. 
</p>
img {
    float: right;
}

Elements are floated horizontally, meaning that an element can only be floated left or right, not up or down.

If you place several floating elements one after the other, they will float next to each other if there is enough room.

<img src="http://www.sololearn.com/uploads/css_logo.png" />
<p>
This paragraph has an image that is floated to the <strong>left.</strong> 
It is highly recommended to add a margin to images so that the text does 
not get too close to the image. If you want your text to be easily read, you 
should always add a few pixels between words and borders, images, 
and other content. 
</p>
img {
    float: left;
    width: 120px;
    margin-right: 10px;
}
p {
    width: 120px;
    float: left;
}

Elements that come after the floating element will flow around it. To avoid this, use the clear property.
The clear property specifies the sides of an element where other floating elements are not allowed to be.

This paragraph is above the div element 
and is not affected by the float right property. 
<br /><br />
<div class="floating">
   <img src="css_logo.png" />
</div>
This paragraph comes after the div element 
and is affected by the float right property. 
<br /><br />
This paragraph also comes after the div element
and is affected by the float right property.
<br /> <br />

.floating {
    float: right;
}


Use the values right, left, and both to specify the sides of an element where other floating elements are not allowed to be.

both is used to clear floats coming from either direction.

This paragraph is above the div element 
and is not affected by the float right property. 
<br/><br/>
<div class="floating">
   <img src="css_logo.png" />
</div>
This paragraph comes after the div element 
and is affected by the float right property. 
<br/><br class="clearing"/>
This paragraph is out of the floating group 
and is not affected by the float right property.
<br/> <br/>

.floating {
    float: right;
}
.clearing {    
    clear: both;
}

As discussed earlier, every element on the page is a box. 
If the height of the box is not set, the height of that box will grow as large as necessary to accommodate the content.

<div>
This text is inside the div element, which has a blue 
background color and is floated to the left. We set a specific 
height and width for the div element, and as you can see, 
the content cannot fit. 
</div>
div {
    width: 150px;
    height: 150px;
    background-color: LightBlue;
    float: left;
}

The CSS overflow property specifies the behavior that occurs when an element's content overflows the element's box.


There are four values for the overflow property: visible (the default value), scroll, hidden, and auto.

The value scroll results in clipped overflow, but a scrollbar is added, so the rest of the content may be seen.

<div>
This text is inside the div element, which has a blue 
background color and is floated to the left. We set a specific 
height and width for the div element, and as you can see, 
the content cannot fit. 
</div>
div {
    width: 150px;
    height: 150px;
    background-color: LightBlue;
    float: left;
    overflow: scroll;
}

auto - If overflow is clipped, a scroll-bar should be added to make it possible to see the rest of the content.
hidden - The overflow is clipped, and the rest of the content will be invisible.

<div>
This text is inside the div element, which has a blue 
background color and is floated to the left. We set a specific 
height and width for the div element, and as you can see, 
the content cannot fit. 
</div>
div {
    width: 150px;
    height: 150px;
    background-color: LightBlue;
    float: left;
    overflow: hidden;
}

When elements are positioned outside the normal flow, they can overlap other elements.
The z-index property specifies the stack order of an element (which element should be placed in front of, or behind, the others).

<div class="blue">Blue</div>
<div class="red">Red</div>

.blue { 
    background-color: #8EC4D0;
    margin-bottom: 15px;
    width: 120px;
    height: 120px;
    color: #FFF;
}
.red {
    background-color: #FF4D4D;
    position: relative;
    width: 120px;
    height: 120px;
    color: #FFF;
    margin-top: -50px;
    margin-left: 50px;
}

The red box overlaps the blue box, because it was placed later in the HTML markup.
The z-index property can change this order.

<div class="blue">Blue</div>
<div class="red">Red</div>
.blue {
    z-index: 3;
    position: relative;
    background-color: #8EC4D0;
    margin-bottom: 15px;
    width: 120px;
    height: 120px;
    color: #FFF;
}
.red {
    z-index: 2;
    position: relative;
    background-color: #FF4D4D;
    width: 120px;
    height: 120px;
    color: #FFF;
    margin-top: -50px;
    margin-left: 50px;
}

The z-index works only on positioned elements (position:absolute, position:relative, or position:fixed).


animation-name property defines which animation to use.

div {
    animation-name: colorchange;   
    animation-duration: 5s;
    height:100px;
    background-color:red;
    -webkit-animation-duration: 5s;
    -webkit-animation-name: colorchange; 
}
@keyframes colorchange {
    from { width: 0px; }
    to { width: 100px; }
}
@-webkit-keyframes colorchange {
    from { width: 0px; }
    to { width: 100px; }
}

The animation-duration property specifies the duration of the selected animation in seconds.

The animation-timing-function specifies the speed curve of an animation. It can have the following values:
ease - specifies an animation with a slow start, then fast, then end slowly (this is default)
linear - specifies an animation with the same speed from start to end
ease-in - specifies an animation with a slow start
ease-out - specifies an animation with a slow end
ease-in-out - specifies an animation with a slow start and end
cubic-bezier(n,n,n,n) - lets you define your own values in a cubic-bezier function

div {
    animation-name: colorchange; 
    animation-duration: 5s;
    animation-timing-function: linear;
    height:100px;
    width:0px;
    background-color:red;
    -webkit-animation-name: colorchange; 
    -webkit-animation-duration: 5s;
    -webkit-animation-timing-function: linear;
}
@keyframes colorchange {
    from { width: 0px; }
    to { width: 100px; }
}
@-webkit-keyframes colorchange {
    from { width: 0px; }
    to { width: 100px; }
}

animation-delay - defines the delay before an animation starts. The CSS syntax looks like this:

div {
    animation-name: colorchange;
    animation-duration: 5s;
    animation-delay: 2s;
    height:100px;
    width:0px;
    background-color:red;
    -webkit-animation-name: colorchange;
    -webkit-animation-duration: 5s;
    -webkit-animation-delay: 2s;
}
@keyframes colorchange {
    from { width: 0px; }
    to { width: 100px; }
}
@-webkit-keyframes colorchange {
    from { width: 0px; }
    to { width: 100px; }
}

The animation-iteration-count property determines the number of times an animation repeats.

div {
    animation-name: colorchange;    
    animation-duration: 5s; 
    animation-delay: 2s;
    animation-iteration-count: 5;
    height:100px;
    width:0px;
    background-color:red;
    -webkit-animation-name: colorchange;    
    -webkit-animation-duration: 5s; 
    -webkit-animation-delay: 2s;
    -webkit-animation-iteration-count: 5;
}
@keyframes colorchange {
    from { width: 0px; }
    to { width: 100px; }
}
@-webkit-keyframes colorchange {
    from { width: 0px; }
    to { width: 100px; }
}

To make the animation repeat forever, just use the infinite value

div {
    animation-name: colorchange;   
    animation-duration: 5s; 
    animation-delay: 2s;  
    animation-iteration-count: infinite;
    height:100px;
    width:0px;
    background-color:red;
    -webkit-animation-name: colorchange;   
    -webkit-animation-duration: 5s; 
    -webkit-animation-delay: 2s;  
    -webkit-animation-iteration-count: infinite;
}
@keyframes colorchange {
    from { width: 0px; }
    to { width: 100px; }
}
@-webkit-keyframes colorchange {
    from { width: 0px; }
    to { width: 100px; }
}

The animation-direction indicates how the keyframe should be applied.
The values can be set as:
normal - the default value, which means it plays forward from 0 % to 100%.
reverse - plays the keyframe in an opposite direction from 100 % to 0%
alternate - the animation first runs forward, then backward, then forward.
alternate-reverse - the animation first runs backward, then forward, then backward.

If you use 0 or a negative number for the animation-iteration-count, the animation will never start.

Consider the following example:
div {
    animation-name: colorchange;
    animation-duration: 3s;
    animation-timing-function: ease-in;
    animation-delay: 1s;
    animation-iteration-count: infinite;
    animation-direction: reverse;
    height:100px;
    width:0px;
    background-color:red;
    -webkit-animation-name: colorchange;
    -webkit-animation-duration: 3s;
    -webkit-animation-timing-function: ease-in;
    -webkit-animation-delay: 1s;
    -webkit-animation-iteration-count: infinite;
    -webkit-animation-direction: reverse;
}
@keyframes colorchange {
    from { width: 0px; }
    to { width: 100px; }
}
@-webkit-keyframes colorchange {
    from { width: 0px; }
    to { width: 100px; }
}

Similar to a line comprehension, this cna be simplified to the following

div {
    animation: colorchange 3s ease-in 1s infinite reverse;
    -webkit-animation: colorchange 3s ease-in 1s infinite reverse;
    height:100px;
    background-color:red;
    width:0px;
}
@keyframes colorchange {
    from { width: 0px; }
    to { width: 100px; }
}
@-webkit-keyframes colorchange {
    from { width: 0px; }
    to { width: 100px; }
}

The order in which each property is declared in the shorthand declaration is important and cannot be altered, or the animation will not work properly.

Along with the x and y axes, 3D Transforms introduce the Z-axis, which enables 3D manipulations.
3D Transforms are quite similar to 2D Transforms:
rotateX(), rotateY() and rotateZ() rotate an element in 3D space around the corresponding axis at a given degree.

<div class="X">rotateX(150deg)</div>
<br />
<div class="Y">rotateY(150deg)</div>
<br />
<div class="Z">rotateZ(150deg)</div>
div.X {
    width:250px;
    height:100px;
    color:white;
    background-color:green;
    transform: rotateX(150deg);
    -webkit-transform: rotateX(150deg);
}
div.Y {
    width:250px;
    height:100px;
    color:white;
    background-color:green;
    transform: rotateY(150deg);
    -webkit-transform: rotateY(150deg);
}
div.Z {
    width:250px;
    height:100px;
    color:white;
    background-color:green;
    transform: rotateZ(150deg);
    -webkit-transform: rotateZ(150deg);
}

You can switch off all transformations applied to an element using the none function: transform: none;

3D translate methods allow you to move the element horizontally (translateX), vertically (translateY) and 
into or out of the screen (translateZ), using any CSS length units (px, em, %, etc.). 
Positive values moves the element toward the viewer, negative values away.

<div id="mybox1"></div> 
#mybox1 {
    transform: translateX(29px) translateY(5em) translateZ(-13px);
    -webkit-transform: translateX(29px) translateY(5em) translateZ(-13px);
    width:250px;
    height:100px;
    color:white;
    background-color:green;
}

The translate3d() method allows us to pass the x, y, and z offsets, all at once and in the following order:

mybox1 {
    transform: translate3d(-20px, 4em, 10px);
    -webkit-transform: translate3d(-20px, 4em, 10px);
    width:250px;
    height:100px;
    color:white;
    background-color:green;
}

Like the translate3d() method, there are also scale3d() and rotate3d(), which are applicable for scaling and rotating elements in 3D

Perspective defines how the depth of the 3D scene is rendered. Think of perspective as a distance from the viewer to the object. 
The greater the value, the further the distance, so the less intense the visual effect.
When defining the perspective property for an element, it is the child elements that get the perspective view, not the element itself.

<div class="empty-div">
    <div class="green-div">
        Example
    </div>
</div>


div.empty-div {
    position: relative;
    height: 200px;
    width: 200px;
    margin: 30px;
    padding: 10px;
    border: 1px solid black;
    perspective: 100px;
    -webkit-perspective: 100px;
}
div.green-div {
    padding: 60px;
    position: absolute;
    background-color: #8bc34a;
    border: 1px solid white;
    transform: rotateX(45deg);
    -webkit-transform: rotateX(45deg);
}

The CSS filter property lets you apply graphical effects like blurring or color shifting to an element.
Filters are commonly used to adjust the rendering of images, backgrounds, and borders.

Image filtering is useful when you want to have different styling for the same image.
Instead of uploading multiple images to the website, you can upload only one image and then define visual effects using the filter property.

Filter functions include blur(), brightness(), contrast(), drop-shadow(), grayscale(), hue-rotate(), invert(), opacity(), saturate() and sepia().

drop-shadow(w h b c) creates a shadow effect that extends beyond an image for the width w and height h with blur b and color c.
w, h, and b are values in pixels.

<!DOCTYPE html>
<html>
    <body>
        Image<br>
        <img src="http://www.sololearn.com/images/tree.jpg"/>
        <p>Drop Shadow 5px 9px 2px blue<p>
        <img class="dropshadow" src="http://www.sololearn.com/images/tree.jpg"/>
    </body>
</html>
img {
    width: 130px;
    height: 100px;
}
.dropshadow {
    filter: drop-shadow(5px 9px 2px blue);
    -webkit-filter: drop-shadow(5px 9px 2px blue);
}

The grayscale function converts an image to grayscale.
The only parameter defines the proportion of the conversion.

0% grayscale is the original image, whereas 100% makes the image completely grayscale.

<!DOCTYPE html>
<html>
  <head>
    <title>Grayscale</title>
  </head>
  <body>
    <img class="original" src="http://www.sololearn.com/images/tree.jpg">
    <img class="filtered" src="http://www.sololearn.com/images/tree.jpg">
  </body>
</html>

.filtered {
  filter: grayscale(100%);
}

The sepia function converts an image to sepia.
This is similar to using grayscale but with a reddish-brown color tone.

The idea behind sepia filters is that they can make black and white photos look a bit more eye-catching than the basic grayscale version.

<!DOCTYPE html>
<html>
  <head>
    <title>Sepia </title>
  </head>
  <body>
    <img class="original" src="http://www.sololearn.com/images/tree.jpg">
    <img class="filtered" src="http://www.sololearn.com/images/tree.jpg">
  </body>
</html>

  .filtered {
    filter: sepia(100%);
  }
  
The saturate function controls the color saturation for an image. The only parameter determines the proportion of the saturation that is applied to the image.
The parameter can be either a percentage value or a number.

<!DOCTYPE html>
<html>
  <head>
    <title>Saturate </title>
  </head>
  <body>
    <img class="original" src="http://www.sololearn.com/images/tree.jpg">
    <img class="filtered" src="http://www.sololearn.com/images/tree.jpg">
  </body>
</html>
.filtered {
  filter: saturate(50%);
  } 
  
The hue-rotate function applies a hue rotation (based on the color circle) to an image.
The function takes an angle of rotation as its parameter. The value of angle defines the number of degrees around the color circle the input samples will be adjusted.

<!DOCTYPE html>
<html>
  <head>
    <title>Hue-Rotate </title>
  </head>
  <body>
    <img class="original" src="http://www.sololearn.com/images/tree.jpg">
    <img class="filtered" src="http://www.sololearn.com/images/tree.jpg">
  </body>
</html>

.filtered {
   filter: hue-rotate(180deg);
}

The invert function inverts the colors of an image to make dark areas bright and bright areas dark.
The function takes the proportion of the conversion as its parameter.

The parameter can be either a percentage value or a number.
0%invert leaves the image unchanged, whereas 100% creates a completely inverted image that is similar to a photographic negative.

.filtered {
  filter: invert(70%);
}


The opacity function sets the opacity of an image to change its transparency.

0% opacity creates a completely transparent image, whereas 100% is the original image.

.filtered {
  filter: opacity(70%);
}

The brightness(amount) function adjusts the brightness of an image, making it appear brighter or darker.
The amount parameter determines the brightness level of the image. The parameter can take either a percentage value or a number.

A value of 0% results in an image that is completely black.
A value of 100% results in an image that is unchanged.
Any amount over 100% produces a brighter image.

.filtered {
  filter: brightness(50%);
}

The contrast function adjusts the contrast of the image.
The amount parameter can take either a percentage value or a number.

A value under100%decreases the contrast, while a value over 100% increases it.
A value of 0% will create an image that is completely gray, while a value of 100% leaves the image unchanged.
The value 0.5 corresponds to 50%, while 1 is the same as 100%

.filtered {
    filter: contrast(140%);
 }
 
 The blur function applies a blur effect to an image.
The blur function has only one parameter, radius, which defines how many pixels on the screen blend into each other. (a larger value creates more blur).
 
 .blured {
  filter:blur(5px);
}

Multiple CSS filters can be used together by separating them with spaces.

.filtered {
  filter: blur(5px) hue-rotate(180deg);
}

.filtered {
  filter:  saturate(30%) drop-shadow(5px 9px 2px gray) blur(1px);
}

